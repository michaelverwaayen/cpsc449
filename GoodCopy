--
-- Starting code for CPSC 449 Assignment 1
--
-- Generate and output a Mondrian-style image as an SVG tag within an HTML 
-- document.
--
import System.IO
import Control.Monad (replicateM)
import System.Random (randomRIO, StdGen, randomR, mkStdGen)

--
-- The width and height of the image being generated.
--
width :: Int
width = 1024

height :: Int
height = 768

--The upper and lower limit of my function 
lowerLimit :: Int
lowerLimit = 33

upperLimit :: Int
upperLimit = 67

--helper function for 120-1.5 w calc 
dumbHaskellFunc :: Int -> Int 
dumbHaskellFunc w = round(1.5 * fromIntegral(w))

--Function that decides my colour based on the value passed in 
colourDecide :: Float -> String 
colourDecide	x
	| x < 0.083333 	= "255, 0, 0"
	| x < 0.1667 	= "0,191,255"
	| x < 0.25  	= "255,255,0"
	| otherwise		= "255,255,255"

--Returns a boolean  if the number is between 120 and width*1.5	
splitDecide :: Int -> Int-> Bool
splitDecide	x y
	| x>120 && x<y 	= True
	| otherwise 	= False
	
--Takes a float and an int and returns a point 	
splitCalcScreen :: Int -> Float -> Int
splitCalcScreen	w r = ((w *(randomInt lowerLimit upperLimit r)) `div` 100)

--
-- Generate and return a list of 20000 random floating point numbers between 
-- 0 and 1.  (Increase the 20000 if you ever run out of random values).
-- 
randomList :: Int -> [Float]
randomList seed = take 20000 (rl_helper (mkStdGen seed))

rl_helper :: StdGen -> [Float]
rl_helper g = fst vg : rl_helper (snd vg)
  where vg = randomR (0.0, 1.0 :: Float) g

--
-- Compute an integer between low and high from a (presumably random) floating
-- point number between 0 and 1.
--
randomInt :: Int -> Int -> Float -> Int
randomInt low high x = round ((fromIntegral (high - low) * x) + fromIntegral low)

--
-- Generate the tag for a rectangle with random color.  Replace the 
-- implementation of this function so that it generates all of the tags
-- needed for a piece of random Mondrian art.
-- 
-- Parameters:
--   x, y: The upper left corner of the region
--   w, h: The width and height of the region
--   r:s:t:rs: A list of random floating point values between 0 and 1
--
-- Returns:
--   [Float]: The remaining, unused random values
--   String: The SVG tags that draw the image
--
mondrian :: Int -> Int -> Int -> Int -> Float -> String
mondrian x y w h r  =
  "<rect x=" ++ (show x) ++
  " y=" ++ (show y) ++
  " width=" ++ (show w) ++
  " height=" ++ (show h) ++
  " fill=\"rgb(" ++ (colourDecide r) ++ ")\" "
                 ++ "stroke=\"black\" />"   
                         
mondrianMania :: Int -> Int -> Int -> Int -> [Float] -> (String, [Float])	
mondrianMania x y w h (r:g:b:rest)					 
	| w >= width `div` 2 &&  h >= height `div` 2 =
		((mondrian x y w h r ) ++
		ul_tags ++
		ur_tags ++
		ll_tags ++
		lr_tags,
		lr_rest)
	| w >= width `div` 2  =
		(ul_tags ++ 
		ur_tags,
		ur_rest)
	| h >= height `div` 2 =
		(ul_tags ++
		ll_tags,
		ll_rest)
	| (splitDecide w (randomInt 120 (dumbHaskellFunc w) (head rest))) == True && (splitDecide h (randomInt 120 (dumbHaskellFunc h ) (head rest))) == True =
		(ul_tags ++
		ur_tags ++
		lr_tags ++
		ll_tags,
		ll_rest)
   | (splitDecide w (randomInt 120 (dumbHaskellFunc w) (head rest))) == True && (splitDecide h (randomInt 120 (dumbHaskellFunc h) (head rest))) == False =
		(ul_tags ++ 
		ur_tags,
		ur_rest)
	| (splitDecide w (randomInt 120 (dumbHaskellFunc w) (head rest))) == False && (splitDecide h (randomInt 120 (dumbHaskellFunc h) (head rest))) == True =
		(ul_tags ++
		ll_tags,
		ll_rest)

	
	
	| otherwise	= (mondrian	x y w h r, rest) 

  where 
    new_w = splitCalcScreen w (head rest)
    new_h = splitCalcScreen h (head rest)
    (ul_tags, ul_rest) = (mondrianMania x y new_w new_h rest) 
    (ur_tags, ur_rest) = (mondrianMania (x + new_w) y (w - new_w) new_h ul_rest)
    (ll_tags, ll_rest) = (mondrianMania x (y + new_h) new_w (h - new_h) ur_rest)
    (lr_tags, lr_rest) = (mondrianMania(x + new_w) (y + new_h) (w - new_w) (h - new_h) ll_rest)





-- The main program which generates and outputs mondrian.html.
--
main :: IO ()
main = do
  --  Right now, the program will generate a different sequence of random
  --  numbers each time it is run.  If you want the same sequence each time
  --  use "let seed = 0" instead of "seed <- randomRIO (0, 100000 :: Int)"

  --let seed = 0
  seed <- randomRIO (0, 200000 :: Int)
  let randomValues = randomList seed

  let prefix = "<html><head></head><body>\n" ++
               "<svg width=\"" ++ (show width) ++ 
               "\" height=\"" ++ (show height) ++ "\">"
      image = fst (mondrianMania 0 0 width height randomValues)
      suffix = "</svg>\n</html>"

  writeFile "mondrian.html" (prefix ++ image ++ suffix)
